1.jstatck命令：
分析工具:IBM Thread and Monitor Dump Analyzer for Java
jstack 14812 >> C:/Users/yuanchunsen/Desktop/jstackfile.txt

2.jmap命令：
分析工具:IBM HeapAnalyzer
jmap -dump:live,format=b,file=C:/Users/yuanchunsen/Desktop/dump.file  pid : dump 内存到文件
jmap -heap  pid ：查看堆内存的使用情况
jmap -histo[:live] pid：查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象

B  byte
C  char
D  double
F  float
I  int
J  long
Z  boolean
[  数组，如[I表示int[]
[L+类名 其他对象

3. jstat 命令:
JVM统计监测工具
jstat -gc pid  [统计间隔] [统计次数]  可以显示gc的信息，查看gc的次数，及时间
jstat -gccapacity pid 可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小
jstat -gcutil pid  统计gc信息统计
jstat -class pid 显示加载class的数量，及所占空间等信息
jstat -gc[new | old] pid  [年轻 | 老年]代对象的信息
jstat -gc[new | old]capacity pid  [年轻 | 老年]代对象的信息及其占用量


 一些术语的中文解释：
         S0C：survivor1的容量 (Byte)
         S1C：survivor2的容量
         S0U：survivor1已使用空间
         S1U：survivor12已使用空间
          EC：Eden的容量
          EU：Eden已使用空间
          OC：Old代的容量
          OU：Old代已使用空间
          PC：Perm(方法区|持久代)的容量
          PU：Perm(方法区|持久代)已使用空间
         YGC：从应用程序启动到采样时年轻代中gc次数
        YGCT：从应用程序启动到采样时年轻代中gc所用时间(s)
         FGC：从应用程序启动到采样时old代(全gc)gc次数
        FGCT：从应用程序启动到采样时old代(全gc)gc所用时间(s)
         GCT：从应用程序启动到采样时gc用的总时间(s)
       NGCMN：年轻代(young)中初始化(最小)的大小 (字节)
       NGCMX：年轻代(young)的最大容量 (字节)
        NGC：年轻代(young)中当前的容量 (字节)
      OGCMN：old代中初始化(最小)的大小 (字节)
      OGCMX：old代的最大容量 (字节)
        OGC：old代当前新生成的容量 (字节)
      PGCMN：perm代中初始化(最小)的大小 (字节)
      PGCMX：perm代的最大容量 (字节)
        PGC：perm代当前新生成的容量 (字节)
         S0：年轻代中第一个survivor（幸存区）已使用的占当前容量百分比
         S1：年轻代中第二个survivor（幸存区）已使用的占当前容量百分比
          E：年轻代中Eden（伊甸园）已使用的占当前容量百分比
          O：old代已使用的占当前容量百分比
          P：perm代已使用的占当前容量百分比
      S0CMX：年轻代中第一个survivor（幸存区）的最大容量 (字节)
      S1CMX：年轻代中第二个survivor（幸存区）的最大容量 (字节)
       ECMX：年轻代中Eden（伊甸园）的最大容量 (字节)
       DSS：当前需要survivor（幸存区）的容量 (字节)（Eden区已满）
        TT： 持有次数限制
       MTT： 最大持有次数限制
4.jps 命令:
主要用于输出jvm中运行的进程
jps -v
jps -lv
-q 不输出类名、Jar名和传入main方法的参数
-m 输出传入main方法的参数
-l 输出main类或Jar的全限名
-v 输出传入JVM的参数

参考：https://www.cnblogs.com/therunningfish/p/5524238.html

